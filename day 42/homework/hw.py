# Custom ფუნქციები ნიშნავს იმას, რომ ფუნქციას ჩვენ ვქმნით
# ანუ ჩვენი საკუთარი ფუნქციაა, რომელიც რაღაცას აკეთებს

# ფუნქციების შექმნა გვეხმარება კოდი რომ იყოს მარტივი და წესრიგში

# ფუნქციის შექმნისთვის ვიყენებთ სიტყვას def

# ფრჩხილებში ვწერთ პარამეტრებს (ცვლადებს), რომლებიც ფუნქციაში შევა

# ფუნქციის გამოძახებისას გადმოგვაქვს კონკრეტული მნიშვნელობები — ეს არის არგუმენტები

# მოდი მარტივი მაგალითით ვნახოთ:

def sum_two_numbers(a, b):  # a და b არის პარამეტრები
    return a + b  # დააბრუნებს ამ ორი რიცხვის ჯამს

# ახლა გამოვიძახოთ ეს ფუნქცია და გადავცეთ ორი რიცხვი:
print(sum_two_numbers(3, 4))  # აქ 3 და 4 არის არგუმენტები → გამოიტანს 7

# ფუნქცია შეგვიძლია ბევრი რამისთვის გამოვიყენოთ — მაგალითად:
# რომ შევამოწმოთ ლუწია თუ არა რიცხვი
# ან დავაბრუნოთ ტექსტი დიდი ასოებით და ასე შემდეგ.







































def sum_two_numbers(a, b):
    return a + b

print(sum_two_numbers(5, 7))  # დააბრუნებს 12




































def check_even_or_odd(number):
    if number % 2 == 0:
        print("რიცხვი ლუწია")
    else:
        print("რიცხვი კენტია")

check_even_or_odd(10)  # დაბეჭდავს "რიცხვი ლუწია"













































def square(num):
    return num * num

print(square(4))  # დააბრუნებს 16










































def to_uppercase(text):
    return text.upper()

print(to_uppercase("vako"))  # დააბრუნებს "VAKO"






































def full_name(firstname, lastname):
    print("თქვენი სრული სახელია:", firstname, lastname)

full_name("ვაკო", "ფაქსაძე")  # დაბეჭდავს: თქვენი სრული სახელია: ვაკო ფაქსაძე